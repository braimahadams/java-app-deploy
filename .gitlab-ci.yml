variables:
  IMAGE_NAME: "registry.gitlab.com/intern8622730/javaapp-deployment-project/javaapp"
  IMAGE_TAG: $CI_PIPELINE_IID
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
  GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  
# Deployment template definition
.deploy-template:
  stage: deploy
  image: registry.gitlab.com/intern8622730/javaapp-deployment-project/ansible-python:latest 
  before_script:
    - eval $(ssh-agent -s)
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" | base64 -d > ~/.ssh/id_rsa
    - chmod 400 ~/.ssh/id_rsa
    - ssh-add ~/.ssh/id_rsa
    - ssh-keyscan -H $DEPLOY_VM_IP >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - export ANSIBLE_CONFIG=./deploy-with-ansible/ansible.cfg
    #- ansible-playbook -i ./deploy-with-ansible/inventory.ini -e "IMAGE_NAME=$IMAGE_NAME IMAGE_TAG=$IMAGE_TAG" -e @./deploy-with-ansible/secret_file.enc --vault-password-file $ANSIBLE_VAULT_PASSWORD_FILE $PLAYBOOK_FILE


# different stages of the CI/CD pipeline
stages:
  - build-artifact
  - code-quality
  - test-artifact
  - build-scan-and-push-image
  - deploy-stage
  - automated-api-tests
  - deploy-prod


# cache the gradle wrapper and build cache to avoid unnecessary rebuilds
cache:
    key: $CI_COMMIT_REF_SLUG
    paths:
      - .gradle/wrapper
      - .gradle/caches
      - build/
    when: on_success


# compile and package the Java artifact
build-artifact:  
  image: sapmachine:21-jdk-ubuntu
  stage: build-artifact
  before_script:
    - export GRADLE_USER_HOME=`pwd`/.gradle
  script:
    - ./gradlew clean build -x test --no-daemon --build-cache 
  artifacts:
    paths:
      - ./build/classes/java/main 
      - ./build/libs
      - ./builds  
    expire_in: 30 day

sonarqube-check:
  image: gradle:8.9.0-jdk21-jammy
  stage: code-quality
  dependencies:
    - build-artifact
  cache:
    policy: pull
    key: "${CI_COMMIT_SHORT_SHA}"
    paths:
      - sonar-scanner/  
  script: gradle sonar
  allow_failure: true
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == 'dev'

.sonarqube-vulnerability-report:
  image: gradle:8.2.0-jdk17-jammy
  stage: code-quality
  script:
    - 'curl -u "${SONAR_TOKEN}:" "${SONAR_HOST_URL}/api/issues/gitlab_sast_export?projectKey=intern8622730_JavaApp-Deployment-Project_2942fb77-c9c3-4f39-8fa9-3f1328e0cfaf&branch=${CI_COMMIT_BRANCH}&pullRequest=${CI_MERGE_REQUEST_IID}" -o gl-sast-sonar-report.json'
  allow_failure: true
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == 'dev'
  artifacts:
    expire_in: 1 day
    reports:
      sast: gl-sast-sonar-report.json



# test the Java artifact
.unit-test:
  image: sapmachine:21-jdk-ubuntu
  stage: test-artifact
  before_script:
    - export GRADLE_USER_HOME=`pwd`/.gradle
  script:
    - ./gradlew test --no-daemon --build-cache
  artifacts:
    when: always
    paths:
      - build/reports/tests/test
    reports:
      junit:
        - build/test-results/test/*.xml


# Performs a smoke test to verify the Java application is running and responds with a 200 OK status
.smoke-test:
  image: sapmachine:21-jdk-ubuntu
  stage: test-artifact
  dependencies:
    - build-artifact
  before_script:
    - export GRADLE_USER_HOME=`pwd`/.gradle
    - apt-get update && apt-get install -y curl
  script:
    - ./smoke-test.sh


# builds scan and pushes the docker image to gitlab container registry
.build-scan-and-push-image:
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  stage: build-scan-and-push-image
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  dependencies: 
    - build-artifact
  before_script:
    - wget https://github.com/aquasecurity/trivy/releases/download/v0.53.0/trivy_0.53.0_Linux-64bit.tar.gz --no-cache
    - tar zxvf trivy_0.53.0_Linux-64bit.tar.gz
    - echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY --username $CI_REGISTRY_USER --password-stdin
    #- docker info
  script:
    - docker build -t $IMAGE_NAME:$IMAGE_TAG . 
    - ./trivy image --no-progress --exit-code 0 --severity HIGH  --scanners vuln $IMAGE_NAME:$IMAGE_TAG
    - ./trivy image --no-progress --exit-code 1 --severity CRITICAL  --scanners vuln $IMAGE_NAME:$IMAGE_TAG
    #if the scan is successful, push the image to gitlab container registry
    - docker push $IMAGE_NAME:$IMAGE_TAG
  when: on_success


# deploy to staging VM
.deploy-to-stage:
  extends: .deploy-template
  stage: deploy-stage
  variables:
    DEPLOY_VM_IP: $STAGING_VM_IP
    PLAYBOOK_FILE: ./deploy-with-ansible/deploy-staging.yml
  rules:
    - if: $CI_COMMIT_BRANCH == 'dev'
      when: on_success
  environment:
    name: staging
    url: http://staging.example.com:8080/
  after_script:
    - echo "Deploy stage completed"


#automated api test for after staging deployment
#automated-api-tests:
#  stage: automated-api-tests
#  image: cimg/base:2021.04
#  before_script:
#    # Installing Postman CLI
#    - #curl -o- "https://dl-cli.pstmn.io/install/linux64.sh" | sh
#  script:
#    # Login using your Postman API keys
#    - #postman login --with-api-key $POSTMAN_API_KEY
#    - #postman collection run "37335399-8b82d342-acf2-447d-8490-0614def34d8d" -e "37335399-7f7303ec-83e0-4b04-85e7-c93affd1c112" 


# manual selection to Deploy to production VM (triggered by merge request to main)
.deploy-to-prod:
  extends: .deploy-template
  stage: deploy-prod
  variables:
    DEPLOY_VM_IP: $PROD_VM_IP
    PLAYBOOK_FILE: ./deploy-with-ansible/deploy-prod.yml
  rules:
  - if: $CI_COMMIT_BRANCH == 'main'
    when: manual
  - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    when: always
  environment:
   name: production
   url: http://example.com:8080/
  after_script:
    - echo "Deploy prod completed"
  
  

 
